{"version":3,"file":"module.js","mappings":"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","sources":["webpack://grafana-github-datasource/external amd \"@emotion/css\"","webpack://grafana-github-datasource/external amd \"@grafana/data\"","webpack://grafana-github-datasource/external amd \"@grafana/runtime\"","webpack://grafana-github-datasource/external amd \"@grafana/ui\"","webpack://grafana-github-datasource/external amd \"lodash\"","webpack://grafana-github-datasource/external amd \"react\"","webpack://grafana-github-datasource/webpack/bootstrap","webpack://grafana-github-datasource/webpack/runtime/compat get default export","webpack://grafana-github-datasource/webpack/runtime/define property getters","webpack://grafana-github-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://grafana-github-datasource/webpack/runtime/make namespace object","webpack://grafana-github-datasource/./variables.ts","webpack://grafana-github-datasource/./types.ts","webpack://grafana-github-datasource/./validation.ts","webpack://grafana-github-datasource/./common/annotationsFromDataFrame.ts","webpack://grafana-github-datasource/./migrations.ts","webpack://grafana-github-datasource/./DataSource.ts","webpack://grafana-github-datasource/./tracking.ts","webpack://grafana-github-datasource/../node_modules/@grafana/experimental/dist/esm/ConfigEditor/DataSourceDescription.js","webpack://grafana-github-datasource/../node_modules/@grafana/experimental/dist/esm/ConfigEditor/ConfigSection/GenericConfigSection.js","webpack://grafana-github-datasource/../node_modules/@grafana/experimental/dist/esm/ConfigEditor/ConfigSection/ConfigSection.js","webpack://grafana-github-datasource/./components/selectors.ts","webpack://grafana-github-datasource/./components/Divider.tsx","webpack://grafana-github-datasource/./views/ConfigEditor.tsx","webpack://grafana-github-datasource/./components/Forms.tsx","webpack://grafana-github-datasource/./views/QueryEditorRepository.tsx","webpack://grafana-github-datasource/./views/QueryEditorReleases.tsx","webpack://grafana-github-datasource/./views/QueryEditorCommits.tsx","webpack://grafana-github-datasource/./views/QueryEditorIssues.tsx","webpack://grafana-github-datasource/./views/QueryEditorMilestones.tsx","webpack://grafana-github-datasource/./views/QueryEditorPullRequests.tsx","webpack://grafana-github-datasource/./views/QueryEditorTags.tsx","webpack://grafana-github-datasource/./views/QueryEditorContributors.tsx","webpack://grafana-github-datasource/./views/QueryEditorLabels.tsx","webpack://grafana-github-datasource/./views/QueryEditorPackages.tsx","webpack://grafana-github-datasource/./views/QueryEditorVulnerabilities.tsx","webpack://grafana-github-datasource/./components/Filters.tsx","webpack://grafana-github-datasource/./views/QueryEditorProjects.tsx","webpack://grafana-github-datasource/./views/QueryEditorWorkflows.tsx","webpack://grafana-github-datasource/./views/QueryEditorWorkflowUsage.tsx","webpack://grafana-github-datasource/./views/QueryEditor.tsx","webpack://grafana-github-datasource/./components/FieldSelect.tsx","webpack://grafana-github-datasource/./views/VariableQueryEditor.tsx","webpack://grafana-github-datasource/./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__89__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { GitHubQuery } from './types';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\n\nexport const replaceVariable = (\n  t: TemplateSrv,\n  value?: string,\n  scoped?: ScopedVars,\n  format?: string\n): string | undefined => {\n  return !!value ? t.replace(value, scoped, format) : value;\n};\n\nexport const replaceVariables = (t: TemplateSrv, query: GitHubQuery, scoped: ScopedVars): GitHubQuery => {\n  let updatedQuery = { ...query };\n  updatedQuery = interpolateObject(updatedQuery, t, scoped);\n  if (query.options) {\n    updatedQuery = { ...updatedQuery, options: interpolateObject(query.options, t, scoped) };\n  }\n  return updatedQuery;\n};\n\nconst interpolateObject = (input: any, t: TemplateSrv, scoped: ScopedVars = {}) => {\n  let newOptions = { ...input };\n  Object.keys(newOptions).forEach((key) => {\n    if (key !== 'refId') {\n      const option = newOptions[key];\n      if (typeof option === 'string') {\n        if (key === 'query') {\n          newOptions = { ...newOptions, [key]: replaceVariable(t, option, scoped, 'csv') };\n        } else {\n          newOptions = { ...newOptions, [key]: replaceVariable(t, option, scoped) };\n        }\n      } else if (Array.isArray(option)) {\n        const replaced = option.map((opt) => interpolateObject(opt, t, scoped));\n        newOptions = { ...newOptions, [key]: replaced };\n      }\n    }\n  });\n  return newOptions;\n};\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\nimport { Filter } from 'components/Filters';\n\nexport interface Label {\n  color: string;\n  description: string;\n  name: string;\n}\n\nexport interface RepositoryOptions {\n  repository?: string;\n  owner?: string;\n}\n\nexport interface GithubEnterpriseOptions {\n  githubUrl?: string;\n}\n\nexport interface GithubDataSourceOptions extends DataSourceJsonData, RepositoryOptions, GithubEnterpriseOptions {\n  // Any global settings\n}\n\nexport interface GithubSecureJsonData {\n  // accessToken is set if the user is using a Personal Access Token to connect to GitHub\n  accessToken?: string;\n}\n\nexport enum QueryType {\n  Commits = 'Commits',\n  Issues = 'Issues',\n  Contributors = 'Contributors',\n  Tags = 'Tags',\n  Releases = 'Releases',\n  Pull_Requests = 'Pull_Requests',\n  Labels = 'Labels',\n  Repositories = 'Repositories',\n  Organizations = 'Organizations',\n  GraphQL = 'GraphQL',\n  Milestones = 'Milestones',\n  Packages = 'Packages',\n  Vulnerabilities = 'Vulnerabilities',\n  Projects = 'Projects',\n  ProjectItems = 'ProjectItems',\n  Stargazers = 'Stargazers',\n  Workflows = 'Workflows',\n  Workflow_Usage = 'Workflow_Usage',\n}\n\nexport enum PackageType {\n  NPM = 'NPM',\n  RUBYGEMS = 'RUBYGEMS',\n  MAVEN = 'MAVEN',\n  DOCKER = 'DOCKER',\n  DEBIAN = 'DEBIAN',\n  NUGET = 'NUGET',\n  PYPI = 'PYPI',\n}\n\nexport enum PullRequestTimeField {\n  ClosedAt,\n  CreatedAt,\n  MergedAt,\n  None,\n}\n\nexport enum IssueTimeField {\n  CreatedAt,\n  ClosedAt,\n  UpdatedAt,\n}\n\nexport enum WorkflowsTimeField {\n  CreatedAt,\n  UpdatedAt,\n}\n\nexport interface Indexable {\n  [index: string]: any;\n}\n\nexport interface ReleasesOptions extends Indexable {}\nexport interface TagsOptions extends Indexable {}\nexport interface PullRequestsOptions extends Indexable {\n  timeField?: PullRequestTimeField;\n  query?: string;\n}\n\nexport interface CommitsOptions extends Indexable {\n  gitRef?: string;\n}\n\nexport interface ContributorsOptions extends Indexable {\n  query?: string;\n}\n\nexport interface LabelsOptions extends Indexable {\n  query?: string;\n}\n\nexport interface IssuesOptions extends Indexable {\n  timeField?: IssueTimeField;\n  query?: string;\n}\n\nexport interface WorkflowsOptions extends Indexable {\n  timeField?: WorkflowsTimeField;\n  query?: string;\n}\n\nexport interface WorkflowUsageOptions extends Indexable {\n  workflowID?: number;\n}\n\nexport interface PackagesOptions extends Indexable {\n  names?: string;\n  packageType?: PackageType;\n}\n\nexport interface MilestonesOptions extends Indexable {\n  query?: string;\n}\n\nexport interface ProjectsOptions extends Indexable {\n  organization?: string;\n  number?: number | string;\n  user?: string;\n  kind?: ProjectQueryType;\n  filters?: Filter[];\n}\n\nexport enum ProjectQueryType {\n  ORG = 0,\n  USER = 1,\n}\n\nexport interface GitHubQuery extends Indexable, DataQuery, RepositoryOptions {\n  options?:\n    | PullRequestsOptions\n    | ReleasesOptions\n    | LabelsOptions\n    | TagsOptions\n    | CommitsOptions\n    | IssuesOptions\n    | ContributorsOptions\n    | ProjectsOptions\n    | WorkflowsOptions\n    | WorkflowUsageOptions;\n}\n\nexport interface GitHubVariableQuery extends GitHubQuery {\n  key?: string;\n  field?: string;\n}\n\nexport interface GitHubAnnotationQuery extends GitHubVariableQuery {\n  timeField?: string;\n}\n\nexport const DefaultQueryType = QueryType.Issues;\n","import { isEmpty } from 'lodash';\nimport { GitHubQuery, ProjectQueryType, QueryType } from './types';\n\nexport const isValid = (query: GitHubQuery): boolean => {\n  if (query.queryType === QueryType.Repositories) {\n    if (isEmpty(query.owner)) {\n      return false;\n    }\n  }\n  if (\n    query.queryType === QueryType.Commits ||\n    query.queryType === QueryType.Contributors ||\n    query.queryType === QueryType.Tags ||\n    query.queryType === QueryType.Releases ||\n    query.queryType === QueryType.Labels ||\n    query.queryType === QueryType.Milestones ||\n    query.queryType === QueryType.Vulnerabilities ||\n    query.queryType === QueryType.Stargazers\n  ) {\n    if (isEmpty(query.owner) || isEmpty(query.repository)) {\n      return false;\n    }\n  }\n  if (query.queryType === QueryType.Projects) {\n    if (isEmpty(query.options?.user) && query.options?.kind === ProjectQueryType.USER) {\n      return false;\n    }\n    if (isEmpty(query.options?.organization)) {\n      return false;\n    }\n  }\n  return !!query.queryType;\n};\n","import { AnnotationEvent, DataFrame, FieldType, Field, KeyValue } from '@grafana/data';\n\ninterface AnnotationEventNames {\n  userId?: string;\n  login?: string;\n  email?: string;\n  avatarUrl?: string;\n  time?: string; // or first time\n  timeEnd?: string;\n  title?: string;\n  text?: string; // or first string\n  tags?: string; // Split on ','\n}\n\nconst defaultAnnotationEventFinder: AnnotationEventNames = {\n  userId: 'userId',\n  login: 'login',\n  email: 'email',\n  avatarUrl: 'avatarUrl',\n  time: 'time',\n  timeEnd: 'timeEnd',\n  title: 'title',\n  text: 'text',\n  tags: 'tags',\n};\n\ninterface AnnotationEventFieldSetter {\n  key: keyof AnnotationEventNames;\n  field: Field;\n\n  regex?: RegExp; // for text\n  split?: string; // for tags\n}\n\nexport interface AnnotationsFromFrameOptions {\n  field?: AnnotationEventNames;\n  regex?: AnnotationEventNames;\n}\n\nexport function getAnnotationsFromFrame(frame: DataFrame, options?: AnnotationsFromFrameOptions): AnnotationEvent[] {\n  const events: AnnotationEvent[] = [];\n  if (!frame || !frame.length) {\n    return events;\n  }\n\n  let hasTime = false;\n  let hasText = false;\n  const byName: KeyValue<Field> = {};\n  for (const f of frame.fields) {\n    byName[f.name.toLowerCase()] = f;\n  }\n\n  options = {\n    field: {},\n    regex: {},\n    ...options,\n  };\n\n  const fields: AnnotationEventFieldSetter[] = [];\n  const finder: AnnotationEventNames = {\n    ...defaultAnnotationEventFinder,\n    ...options?.field,\n  };\n  for (const [key, value] of Object.entries(finder)) {\n    const lower = value ? value.toLowerCase() : '';\n    if (lower && byName[lower]) {\n      const v: AnnotationEventFieldSetter = {\n        key: key as keyof AnnotationEventNames,\n        field: byName[lower],\n      };\n      switch (v.key) {\n        case 'time':\n          hasTime = true;\n          break;\n        case 'text':\n          hasText = true;\n          break;\n        case 'tags':\n          v.split = ',';\n          break;\n      }\n      const regex = options.regex![v.key];\n      if (regex) {\n        v.regex = new RegExp(regex);\n      }\n      fields.push(v);\n    }\n  }\n  if (!hasTime) {\n    const field = frame.fields.find((f) => f.type === FieldType.time);\n    if (!field) {\n      return []; // no time fields exist\n    }\n    fields.push({\n      key: 'time',\n      field,\n    });\n  }\n\n  if (!hasText) {\n    const field = frame.fields.find((f) => f.type === FieldType.string);\n    if (!field) {\n      return []; // no text fields exist\n    }\n    const setter: AnnotationEventFieldSetter = {\n      key: 'text',\n      field,\n    };\n\n    if (options?.regex?.text) {\n      setter.regex = new RegExp(options.regex.text);\n    }\n    fields.push(setter);\n  }\n\n  // Add each value to the string\n  for (let i = 0; i < frame.length; i++) {\n    const anno: AnnotationEvent = {};\n    for (const f of fields) {\n      let v = f.field.values.get(i);\n      if (f.regex) {\n        const match = f.regex.exec(v);\n        if (match) {\n          v = match[1] ? match[1] : match[0];\n        }\n      }\n      if (f.split) {\n        v = (v as string).split(',');\n      }\n      (anno as any)[f.key] = v;\n    }\n    events.push(anno);\n  }\n\n  return events;\n}\n","import { AnnotationEventFieldSource } from '@grafana/data';\n\nconst isNewAnnotation = (json: any) => {\n  return !('annotation' in json);\n};\n\nexport const prepareAnnotation = (json: any) => {\n  if (isNewAnnotation(json)) {\n    return json;\n  }\n\n  const { annotation, ...annotationRest } = json;\n  const { field, timeField, ...targetRest } = annotation;\n\n  const migratedAnnotation = {\n    ...annotationRest,\n    target: targetRest,\n    mappings: {\n      text: field\n        ? {\n            source: AnnotationEventFieldSource.Field,\n            value: field,\n          }\n        : undefined,\n      time: timeField\n        ? {\n            source: AnnotationEventFieldSource.Field,\n            value: timeField,\n          }\n        : undefined,\n      ...annotationRest.mappings,\n    },\n  };\n\n  return migratedAnnotation;\n};\n","import {\n  AnnotationEvent,\n  DataFrame,\n  DataFrameView,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  LegacyMetricFindQueryOptions,\n  MetricFindValue,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { GithubDataSourceOptions, GitHubQuery, GitHubVariableQuery } from './types';\nimport { replaceVariables } from './variables';\nimport { isValid } from './validation';\nimport { getAnnotationsFromFrame } from 'common/annotationsFromDataFrame';\nimport { prepareAnnotation } from 'migrations';\nimport { Observable } from 'rxjs';\nimport { trackRequest } from 'tracking';\n\nexport class GithubDataSource extends DataSourceWithBackend<GitHubQuery, GithubDataSourceOptions> {\n  templateSrv = getTemplateSrv();\n\n  constructor(instanceSettings: DataSourceInstanceSettings<GithubDataSourceOptions>) {\n    super(instanceSettings);\n    this.annotations = {\n      prepareAnnotation,\n    };\n  }\n\n  // Required by DataSourceApi. It executes queries based on the provided DataQueryRequest.\n  query(request: DataQueryRequest<GitHubQuery>): Observable<DataQueryResponse> {\n    trackRequest(request);\n    return super.query(request);\n  }\n\n  // Implemented as a part of DataSourceApi\n  // Only execute queries that have a query type\n  filterQuery = (query: GitHubQuery) => {\n    return isValid(query) && !query.hide;\n  };\n\n  // Implemented as a part of DataSourceApi. Interpolates variables and adds ad hoc filters to a list of Github queries.\n  applyTemplateVariables(query: GitHubQuery, scoped: ScopedVars): GitHubQuery {\n    return replaceVariables(this.templateSrv, query, scoped);\n  }\n\n  /**\n   * Implemented as part of the DataSourceAPI. It allows the datasource to serve as a source of annotations for a dashboard.\n   * @returns A promise that resolves to an array of AnnotationEvent objects representing the annotations for the dashboard.\n   * @todo This is deprecated and it is recommended to use the `AnnotationSupport` feature for annotations.\n   */\n  async annotationQuery(request: any): Promise<AnnotationEvent[]> {\n    const { annotation } = request.annotation;\n\n    const query = {\n      targets: [\n        {\n          ...annotation,\n          datasourceId: this.id,\n          refId: this.name,\n        },\n      ],\n      range: request.range,\n      interval: request.interval,\n    } as DataQueryRequest<GitHubQuery>;\n\n    const res = await this.query(query).toPromise();\n\n    if (!res?.data?.length) {\n      return [];\n    }\n    return getAnnotationsFromFrame(res.data[0], {\n      field: {\n        time: annotation.timeField, // or first time field\n        text: annotation.field || 'name',\n      },\n    });\n  }\n\n  // Used in VariableQueryEditor to get the choices for variables\n  async getChoices(query: GitHubQuery): Promise<string[]> {\n    const request = {\n      targets: [\n        {\n          ...query,\n          refId: 'metricFindQuery',\n        },\n      ],\n      range: {\n        to: {},\n        from: {},\n      },\n    } as DataQueryRequest;\n\n    try {\n      const res = await this.query(request).toPromise();\n      const columns = (res?.data[0]?.fields || []).map((f: any) => f.name) || [];\n      return columns;\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n\n  // Implemented as part of DataSourceAPI and used for template variable queries\n  async metricFindQuery(query: GitHubVariableQuery, options: LegacyMetricFindQueryOptions): Promise<MetricFindValue[]> {\n    const request = {\n      targets: [\n        {\n          ...query,\n          refId: 'metricFindQuery',\n        },\n      ],\n      range: options.range,\n    } as DataQueryRequest;\n    try {\n      const res = await this.query(request).toPromise();\n      if (!res?.data?.length) {\n        return [];\n      }\n      const view = new DataFrameView(res.data[0] as DataFrame);\n      return view.map((item) => {\n        const value = item[query.key || ''] || item[query.field || 'name'];\n        return {\n          value,\n          text: item[query.field || 'name'],\n        };\n      });\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n  }\n}\n","import { CoreApp, DataQueryRequest } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { GitHubQuery, IssueTimeField, PullRequestTimeField, WorkflowsTimeField } from 'types';\n\nexport const trackRequest = (request: DataQueryRequest<GitHubQuery>) => {\n  if (request.app === CoreApp.Dashboard || request.app === CoreApp.PanelViewer) {\n    return;\n  }\n\n  request.targets.forEach((target) => {\n    let properties: Partial<GitHubQuery> = { app: request.app, queryType: target.queryType };\n\n    if (target.queryType === 'Issues') {\n      properties.timeField = IssueTimeField[target.options?.timeField ?? 0];\n    }\n\n    if (target.queryType === 'Pull_Requests') {\n      properties.timeField = PullRequestTimeField[target.options?.timeField ?? 0];\n    }\n\n    if (target.queryType === 'Workflows') {\n      properties.timeField = WorkflowsTimeField[target.options?.timeField ?? 0];\n    }\n\n    if (target.queryType === 'Packages') {\n      properties.timeField = target?.options?.packageType ?? 'NPM';\n    }\n\n    reportInteraction('grafana_github_query_executed', properties);\n  });\n};\n","import React from 'react';\nimport { css, cx } from '@emotion/css';\nimport { useTheme2 } from '@grafana/ui';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst DataSourceDescription = ({ dataSourceName, docsLink, hasRequiredFields = true, className }) => {\n  const theme = useTheme2();\n  const styles = {\n    container: css({\n      p: {\n        margin: 0\n      },\n      \"p + p\": {\n        marginTop: theme.spacing(2)\n      }\n    }),\n    text: css(__spreadProps(__spreadValues({}, theme.typography.body), {\n      color: theme.colors.text.secondary,\n      a: css({\n        color: theme.colors.text.link,\n        textDecoration: \"underline\",\n        \"&:hover\": {\n          textDecoration: \"none\"\n        }\n      })\n    }))\n  };\n  return /* @__PURE__ */ React.createElement(\"div\", { className: cx(styles.container, className) }, /* @__PURE__ */ React.createElement(\"p\", { className: styles.text }, \"Before you can use the \", dataSourceName, \" data source, you must configure it below or in the config file. For detailed instructions,\", \" \", /* @__PURE__ */ React.createElement(\"a\", { href: docsLink, target: \"_blank\", rel: \"noreferrer\" }, \"view the documentation\"), \".\"), hasRequiredFields && /* @__PURE__ */ React.createElement(\"p\", { className: styles.text }, /* @__PURE__ */ React.createElement(\"i\", null, \"Fields marked with * are required\")));\n};\n\nexport { DataSourceDescription };\n//# sourceMappingURL=DataSourceDescription.js.map\n","import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { useTheme2, IconButton } from '@grafana/ui';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst GenericConfigSection = ({\n  children,\n  title,\n  description,\n  isCollapsible = false,\n  isInitiallyOpen = true,\n  kind = \"section\",\n  className\n}) => {\n  const { colors, typography, spacing } = useTheme2();\n  const [isOpen, setIsOpen] = useState(isCollapsible ? isInitiallyOpen : true);\n  const iconName = isOpen ? \"angle-up\" : \"angle-down\";\n  const isSubSection = kind === \"sub-section\";\n  const collapsibleButtonAriaLabel = `${isOpen ? \"Collapse\" : \"Expand\"} section ${title}`;\n  const styles = {\n    header: css({\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\"\n    }),\n    title: css({\n      margin: 0\n    }),\n    subtitle: css({\n      margin: 0,\n      fontWeight: typography.fontWeightRegular\n    }),\n    descriptionText: css(__spreadProps(__spreadValues({\n      marginTop: spacing(isSubSection ? 0.25 : 0.5),\n      marginBottom: 0\n    }, typography.bodySmall), {\n      color: colors.text.secondary\n    })),\n    content: css({\n      marginTop: spacing(2)\n    })\n  };\n  return /* @__PURE__ */ React.createElement(\"div\", { className }, /* @__PURE__ */ React.createElement(\"div\", { className: styles.header }, kind === \"section\" ? /* @__PURE__ */ React.createElement(\"h3\", { className: styles.title }, title) : /* @__PURE__ */ React.createElement(\"h6\", { className: styles.subtitle }, title), isCollapsible && /* @__PURE__ */ React.createElement(\n    IconButton,\n    {\n      name: iconName,\n      onClick: () => setIsOpen(!isOpen),\n      type: \"button\",\n      size: \"xl\",\n      \"aria-label\": collapsibleButtonAriaLabel\n    }\n  )), description && /* @__PURE__ */ React.createElement(\"p\", { className: styles.descriptionText }, description), isOpen && /* @__PURE__ */ React.createElement(\"div\", { className: styles.content }, children));\n};\n\nexport { GenericConfigSection };\n//# sourceMappingURL=GenericConfigSection.js.map\n","import React from 'react';\nimport { GenericConfigSection } from './GenericConfigSection.js';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nconst ConfigSection = (_a) => {\n  var _b = _a, { children } = _b, props = __objRest(_b, [\"children\"]);\n  return /* @__PURE__ */ React.createElement(GenericConfigSection, __spreadProps(__spreadValues({}, props), { kind: \"section\" }), children);\n};\n\nexport { ConfigSection };\n//# sourceMappingURL=ConfigSection.js.map\n","export const components = {\n  ConfigEditor: {\n    AccessToken: 'data-testid Access Token',\n  },\n  QueryEditor: {\n    QueryType: {\n      container: {\n        ariaLabel: 'Query Type container',\n      },\n    },\n    Owner: {\n      input: 'Query editor owner',\n    },\n    Repository: {\n      input: 'Query editor repository',\n    },\n    Query: {\n      input: 'Query editor query',\n    },\n    Ref: {\n      input: 'Query editor ref',\n    },\n    Number: {\n      input: 'Query editor number',\n    },\n    Issues: {\n      timeFieldInput: 'Query editor issues time field',\n    },\n  },\n  AnnotationEditor: {\n    container: 'Annotation editor container',\n  },\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\n// this custom component is necessary because the Grafana UI <Divider /> component is no backwards compatible with Grafana < 10.1.0\nexport const Divider = () => {\n  const styles = useStyles2(getStyles);\n  return <hr className={styles.horizontalDivider} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    horizontalDivider: css({\n      borderTop: `1px solid ${theme.colors.border.weak}`,\n      margin: theme.spacing(2, 0),\n      width: '100%',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme2, onUpdateDatasourceJsonDataOption } from '@grafana/data';\nimport { ConfigSection, DataSourceDescription } from '@grafana/experimental';\nimport { Collapse, Field, Input, Label, RadioButtonGroup, SecretInput, useStyles2 } from '@grafana/ui';\nimport React, { ChangeEvent, useState } from 'react';\nimport { components } from '../components/selectors';\nimport { GithubDataSourceOptions, GithubSecureJsonData } from '../types';\nimport { Divider } from 'components/Divider';\n\nexport type ConfigEditorProps = DataSourcePluginOptionsEditorProps<GithubDataSourceOptions, GithubSecureJsonData>;\n\nconst ConfigEditor = (props: ConfigEditorProps) => {\n  const { options, onOptionsChange } = props;\n  const { jsonData, secureJsonData, secureJsonFields } = options;\n  const secureSettings = (secureJsonData || {}) as GithubSecureJsonData;\n  const styles = useStyles2(getStyles);\n\n  const [selectedLicense, setSelectedLicense] = useState(jsonData.githubUrl ? 'github-enterprise' : 'github-basic');\n  const [isOpen, setIsOpen] = useState(true);\n\n  const onSettingUpdate =\n    (prop: string, set = true) =>\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const { onOptionsChange, options } = props;\n      onOptionsChange({\n        ...options,\n        secureJsonData: {\n          ...options.secureJsonData,\n          [prop]: event.target.value,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          [prop]: set,\n        },\n      });\n    };\n\n  const onSettingReset = (prop: string) => () => {\n    onSettingUpdate(prop, false)({ target: { value: '' } } as ChangeEvent<HTMLInputElement>);\n  };\n\n  const onLicenseChange = (value: string) => {\n    if (value === 'github-basic') {\n      onOptionsChange({ ...options, jsonData: { ...jsonData, githubUrl: '' } });\n    }\n\n    setSelectedLicense(value);\n  };\n\n  const licenseOptions = [\n    { label: 'Basic', value: 'github-basic' },\n    { label: 'Enterprise', value: 'github-enterprise' },\n  ];\n\n  const WIDTH_LONG = 40;\n\n  return (\n    <>\n      <DataSourceDescription\n        dataSourceName=\"GitHub\"\n        docsLink=\"https://grafana.com/grafana/plugins/grafana-github-datasource/\"\n        hasRequiredFields={false}\n      />\n\n      <Divider />\n\n      <Collapse collapsible label=\"Access Token Permissions\" isOpen={isOpen} onToggle={() => setIsOpen((x) => !x)}>\n        <p>\n          To create a new Access Token, navigate to{' '}\n          <a className={styles.externalLink} href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noreferrer\">\n            Personal Access Tokens\n          </a>{' '}\n          and create a click &quot;Generate new token.&quot;\n        </p>\n\n        <p>Ensure that your token has the following permissions:</p>\n\n        <b>For all repositories:</b>\n        <pre>public_repo, repo:status, repo_deployment, read:packages, read:user, user:email</pre>\n\n        <b>For Github projects:</b>\n        <pre>read:org, read:project</pre>\n\n        <b>An extra setting is required for private repositories:</b>\n        <pre>repo (Full control of private repositories)</pre>\n      </Collapse>\n\n      <Divider />\n\n      <ConfigSection title=\"Connection\">\n        <Field label=\"Access Token\">\n          <SecretInput\n            placeholder=\"GitHub Personal Access Token\"\n            data-testid={components.ConfigEditor.AccessToken}\n            value={secureSettings.accessToken || ''}\n            isConfigured={secureJsonFields!['accessToken']}\n            onChange={onSettingUpdate('accessToken', false)}\n            onReset={onSettingReset('accessToken')}\n            width={WIDTH_LONG}\n          />\n        </Field>\n      </ConfigSection>\n\n      <Divider />\n\n      <ConfigSection title=\"Additional Settings\" isCollapsible>\n        <Label>GitHub License</Label>\n        <RadioButtonGroup\n          options={licenseOptions}\n          value={selectedLicense}\n          onChange={onLicenseChange}\n          className={styles.radioButton}\n        />\n\n        {selectedLicense === 'github-enterprise' && (\n          <Field label=\"GitHub Enterprise URL\">\n            <Input\n              placeholder=\"URL of GitHub Enterprise\"\n              value={jsonData.githubUrl}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'githubUrl')}\n              width={WIDTH_LONG}\n            />\n          </Field>\n        )}\n      </ConfigSection>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    externalLink: css`\n      text-decoration: underline;\n    `,\n    radioButton: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n  };\n};\n\nexport default ConfigEditor;\n","import React, { InputHTMLAttributes } from 'react';\nimport { InlineFieldRow } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nexport interface Props extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  tooltip?: string;\n  labelWidth?: number;\n  children?: React.ReactNode;\n}\n\nexport const QueryEditorRow = (props: any) => {\n  const styles = getStyles();\n  return <InlineFieldRow className={styles.rowSpacing}>{props.children}</InlineFieldRow>;\n};\n\nconst getStyles = () => {\n  return {\n    rowSpacing: css({\n      marginBottom: '4px',\n    }),\n  };\n};\n","import React, { useState, useEffect } from 'react';\nimport { Input, InlineLabel } from '@grafana/ui';\n\nimport { QueryEditorRow } from '../components/Forms';\nimport { RepositoryOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { components } from '../components/selectors';\n\ninterface Props extends RepositoryOptions {\n  onChange: (value: RepositoryOptions) => void;\n}\n\nconst QueryEditorRepositories = (props: Props) => {\n  const [repository, setRepository] = useState<string>(props.repository || '');\n  const [owner, setOwner] = useState<string>(props.owner || '');\n\n  useEffect(() => {\n    setRepository(props.repository || '');\n  }, [props.repository]);\n\n  useEffect(() => {\n    setOwner(props.owner || '');\n  }, [props.owner]);\n\n  return (\n    <QueryEditorRow>\n      <InlineLabel\n        tooltip=\"The owner (organization or user) of the GitHub repository (example: 'grafana')\"\n        width={LeftColumnWidth * 2}\n      >\n        Owner\n      </InlineLabel>\n      <Input\n        aria-label={components.QueryEditor.Owner.input}\n        width={RightColumnWidth}\n        value={owner}\n        onChange={(el) => setOwner(el.currentTarget.value)}\n        onBlur={(el) =>\n          props.onChange({\n            ...props,\n            owner: el.currentTarget.value,\n          })\n        }\n      />\n      <InlineLabel tooltip=\"The name of the GitHub repository\" width={LeftColumnWidth * 2}>\n        Repository\n      </InlineLabel>\n      <Input\n        aria-label={components.QueryEditor.Repository.input}\n        width={RightColumnWidth}\n        value={repository}\n        onChange={(el) => setRepository(el.currentTarget.value)}\n        onBlur={(el) =>\n          props.onChange({\n            ...props,\n            repository: el.currentTarget.value,\n          })\n        }\n      />\n    </QueryEditorRow>\n  );\n};\n\nexport default QueryEditorRepositories;\n","import React from 'react';\n\nconst QueryEditorReleases = () => <></>;\n\nexport default QueryEditorReleases;\n","import React, { useState } from 'react';\nimport { Input, InlineField } from '@grafana/ui';\n\nimport { CommitsOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { components } from 'components/selectors';\n\ninterface Props extends CommitsOptions {\n  onChange: (value: CommitsOptions) => void;\n}\n\nconst QueryEditorCommits = (props: Props) => {\n  const [ref, setRef] = useState<string>(props.gitRef || '');\n  return (\n    <>\n      <InlineField labelWidth={LeftColumnWidth * 2} label=\"Ref (Branch / Tag)\">\n        <Input\n          aria-label={components.QueryEditor.Ref.input}\n          width={RightColumnWidth}\n          value={ref}\n          onChange={(el) => setRef(el.currentTarget.value)}\n          onBlur={(el) => props.onChange({ ...props, gitRef: el.currentTarget.value })}\n        />\n      </InlineField>\n    </>\n  );\n};\n\nexport default QueryEditorCommits;\n","import React, { useState } from 'react';\nimport { Input, Select, InlineField } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { IssuesOptions, IssueTimeField } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { components } from 'components/selectors';\n\ninterface Props extends IssuesOptions {\n  onChange: (value: IssuesOptions) => void;\n}\n\nconst timeFieldOptions: Array<SelectableValue<IssueTimeField>> = Object.keys(IssueTimeField)\n  .filter((_, i) => IssueTimeField[i] !== undefined)\n  .map((_, i) => {\n    return {\n      label: `${IssueTimeField[i]}`,\n      value: i as IssueTimeField,\n    };\n  });\n\nconst defaultTimeField = 0 as IssueTimeField;\n\nconst QueryEditorIssues = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <InlineField\n        labelWidth={LeftColumnWidth * 2}\n        label=\"Query\"\n        tooltip={() => (\n          <>\n            For more information, visit&nbsp;\n            <a\n              href=\"https://docs.github.com/en/github/searching-for-information-on-github/searching-issues-and-pull-requests\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              https://docs.github.com/en/github/searching-for-information-on-github/searching-issues-and-pull-requests\n            </a>\n          </>\n        )}\n        interactive={true}\n      >\n        <Input\n          value={query}\n          width={RightColumnWidth * 2 + LeftColumnWidth}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) =>\n            props.onChange({\n              ...props,\n              query: el.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      <InlineField\n        labelWidth={LeftColumnWidth * 2}\n        label=\"Time Field\"\n        tooltip=\"The time field to filter on the time range\"\n      >\n        <Select\n          data-testid={components.QueryEditor.Issues.timeFieldInput}\n          width={RightColumnWidth}\n          options={timeFieldOptions}\n          value={props.timeField || defaultTimeField}\n          onChange={(opt) =>\n            props.onChange({\n              ...props,\n              timeField: opt.value,\n            })\n          }\n        />\n      </InlineField>\n    </>\n  );\n};\n\nexport default QueryEditorIssues;\n","import React, { useState } from 'react';\n\nimport { Input, InlineField } from '@grafana/ui';\n\nimport { MilestonesOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends MilestonesOptions {\n  onChange: (value: MilestonesOptions) => void;\n}\n\nconst QueryEditorMilestones = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <InlineField labelWidth={LeftColumnWidth * 2} label=\"Query\" tooltip=\"Query milestones by title\">\n        <Input\n          value={query}\n          width={RightColumnWidth * 2 + LeftColumnWidth}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) =>\n            props.onChange({\n              ...props,\n              query: el.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n    </>\n  );\n};\n\nexport default QueryEditorMilestones;\n","import React, { useState } from 'react';\n\nimport { Input, Select, InlineField } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\nimport { PullRequestsOptions, PullRequestTimeField } from '../types';\n\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends PullRequestsOptions {\n  onChange: (value: PullRequestsOptions) => void;\n}\n\nconst timeFieldOptions: Array<SelectableValue<PullRequestTimeField>> = Object.keys(PullRequestTimeField)\n  .filter((_, i) => PullRequestTimeField[i] !== undefined)\n  .map((_, i) => {\n    return {\n      label: `${PullRequestTimeField[i]}`,\n      value: i as PullRequestTimeField,\n    };\n  });\n\nconst defaultTimeField = timeFieldOptions[0].value;\n\nconst QueryEditorPullRequests = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <InlineField\n        labelWidth={LeftColumnWidth * 2}\n        label=\"Query\"\n        tooltip={() => (\n          <>\n            For more information, visit&nbsp;\n            <a\n              href=\"https://docs.github.com/en/github/searching-for-information-on-github/searching-issues-and-pull-requests\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              https://docs.github.com/en/github/searching-for-information-on-github/searching-issues-and-pull-requests\n            </a>\n          </>\n        )}\n        interactive={true}\n      >\n        <Input\n          value={query}\n          width={RightColumnWidth}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) =>\n            props.onChange({\n              ...props,\n              query: el.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      <InlineField\n        labelWidth={LeftColumnWidth * 2}\n        label=\"Time Field\"\n        tooltip=\"The time field to filter on the time range. WARNING: If selecting 'None', be mindful of the amount of data being queried. On larger repositories, querying all pull requests could easily cause rate limiting\"\n      >\n        <Select\n          width={RightColumnWidth}\n          options={timeFieldOptions}\n          value={props.timeField || defaultTimeField}\n          onChange={(opt) =>\n            props.onChange({\n              ...props,\n              timeField: opt.value,\n            })\n          }\n        />\n      </InlineField>\n    </>\n  );\n};\n\nexport default QueryEditorPullRequests;\n","import React from 'react';\n\nconst QueryEditorTags = () => <></>;\nexport default QueryEditorTags;\n","import React, { useState } from 'react';\nimport { Input, InlineField } from '@grafana/ui';\n\nimport { ContributorsOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends ContributorsOptions {\n  onChange: (value: ContributorsOptions) => void;\n}\n\nconst QueryEditorContributors = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <InlineField labelWidth={LeftColumnWidth * 2} label=\"Query (optional)\">\n        <Input\n          width={RightColumnWidth}\n          value={query}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) => props.onChange({ ...props, query: el.currentTarget.value })}\n        />\n      </InlineField>\n    </>\n  );\n};\n\nexport default QueryEditorContributors;\n","import React, { useState } from 'react';\nimport { Input, InlineField } from '@grafana/ui';\n\nimport { LabelsOptions } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends LabelsOptions {\n  onChange: (value: LabelsOptions) => void;\n}\n\nconst QueryEditorLabels = (props: Props) => {\n  const [query, setQuery] = useState<string>(props.query || '');\n  return (\n    <>\n      <InlineField labelWidth={LeftColumnWidth * 2} label=\"Query (optional)\">\n        <Input\n          width={RightColumnWidth}\n          value={query}\n          onChange={(el) => setQuery(el.currentTarget.value)}\n          onBlur={(el) => props.onChange({ ...props, query: el.currentTarget.value })}\n        />\n      </InlineField>\n    </>\n  );\n};\n\nexport default QueryEditorLabels;\n","import React, { useEffect, useState } from 'react';\n\nimport { Input, Select, InlineField } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\nimport { PackagesOptions, PackageType } from '../types';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\n\ninterface Props extends PackagesOptions {\n  onChange: (value: PackagesOptions) => void;\n}\n\nexport const DefaultPackageType = PackageType.NPM;\n\nconst packageTypeOptions: Array<SelectableValue<string>> = Object.keys(PackageType).map((v) => {\n  return {\n    label: v.replace('/_/gi', ' '),\n    value: v,\n  };\n});\n\nconst QueryEditorPackages = (props: Props) => {\n  const [names, setNames] = useState<string>(props.names || '');\n\n  // Set default package type if not set\n  useEffect(() => {\n    if (!props.packageType) {\n      props.onChange({\n        ...props,\n        packageType: DefaultPackageType,\n      });\n    }\n  }, [props]);\n\n  return (\n    <>\n      <InlineField labelWidth={LeftColumnWidth * 2} label=\"Package type\">\n        <Select\n          options={packageTypeOptions}\n          value={props.packageType || DefaultPackageType}\n          width={RightColumnWidth}\n          onChange={(opt) =>\n            props.onChange({\n              ...props,\n              packageType: opt.value as PackageType,\n            })\n          }\n        />\n      </InlineField>\n      <InlineField\n        labelWidth={LeftColumnWidth * 2}\n        label=\"Names\"\n        tooltip=\"Search for packages using a comma delimited list of names\"\n      >\n        <Input\n          value={names}\n          width={RightColumnWidth * 2 + LeftColumnWidth}\n          onChange={(el) => setNames(el.currentTarget.value)}\n          onBlur={(el) =>\n            props.onChange({\n              ...props.query,\n              names: el.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n    </>\n  );\n};\n\nexport default QueryEditorPackages;\n","import React from 'react';\n\nconst QueryEditorVulnerabilities = () => <></>;\nexport default QueryEditorVulnerabilities;\n","import React, { useState } from 'react';\nimport { SegmentAsync, Segment, InlineFieldRow, Button } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  value?: Filter[];\n  onChange: (filters: Filter[]) => void;\n  loadOptions: (filter?: string) => Promise<Array<SelectableValue<string>>>;\n  ops: Array<SelectableValue<string>>;\n}\n\nexport const Filters: React.FC<Props> = (props: Props) => {\n  const { value, onChange } = props;\n  const defaultFilters: Filter[] = [];\n  const [filters, setFilters] = useState<Filter[]>(value || defaultFilters);\n  const [loading, setLoading] = useState<number>();\n\n  const add = () => {\n    setFilters([...filters, { key: '', value: '', op: props.ops[0]?.value || '=' }]);\n  };\n\n  const onKeyChange = (index: number) => (selected: SelectableValue) => {\n    const update = filters.map((f, i) => (i === index ? { ...f, key: selected.value, value: '' } : f));\n    setFilters(update);\n  };\n\n  const onValueChange = (index: number) => (selected: SelectableValue) => {\n    const update = filters.map((f, i) => (i === index ? { ...f, value: selected.value } : f));\n    changeFilters(update);\n  };\n\n  const onOpChange = (index: number) => (selected: SelectableValue) => {\n    const update = filters.map((f, i) => (i === index ? { ...f, op: selected.value } : f));\n    changeFilters(update);\n  };\n\n  const onConjunctionChange = (index: number) => (selected: SelectableValue) => {\n    const update = filters.map((f, i) => (i === index ? { ...f, conjunction: selected.value } : f));\n    changeFilters(update);\n  };\n\n  const remove = (index: number) => () => {\n    const update = filters.filter((f, i) => i !== index);\n    changeFilters(update);\n  };\n\n  function changeFilters(filters: Filter[]) {\n    setFilters(filters);\n    onChange(filters);\n  }\n\n  const loadValues = (index: number) => async () => {\n    setLoading(index);\n    const key = filters[index].key;\n    const opts = await props.loadOptions(key);\n    setLoading(undefined);\n    return opts;\n  };\n\n  const list = filters || [];\n\n  const ops = ['and', 'or'];\n  const opList = ops.map((op) => ({ label: op, value: op }));\n\n  const styles = {\n    loading: css`\n      position: absolute;\n      top: 0;\n      padding: 8px 10px;\n      font-weight: 500;\n      font-size: 12px;\n    `,\n    wrapper: css`\n      position: relative;\n    `,\n  };\n\n  return (\n    <InlineFieldRow>\n      <>\n        {list.map((filter: Filter, i: number) => (\n          <>\n            <SegmentAsync\n              loadOptions={props.loadOptions}\n              placeholder=\"Key...\"\n              allowCustomValue={true}\n              value={filter.key}\n              onChange={onKeyChange(i)}\n            />\n            <Segment placeholder=\"Operator...\" value={filter.op} onChange={onOpChange(i)} options={props.ops} />\n            <span className={styles.wrapper}>\n              <SegmentAsync\n                loadOptions={loadValues(i)}\n                placeholder=\"Value...\"\n                allowCustomValue={true}\n                value={filter.value}\n                onChange={onValueChange(i)}\n              />\n              {loading === i && <div className={styles.loading}>Loading...</div>}\n            </span>\n            <Button variant=\"secondary\" onClick={remove(i)} icon=\"trash-alt\" />\n            {list.length > 1 && i !== list.length - 1 && (\n              <Segment onChange={onConjunctionChange(i)} options={opList} value={filter.conjunction || 'and'}></Segment>\n            )}\n          </>\n        ))}\n        <Button variant=\"secondary\" onClick={add} icon=\"plus\" />\n      </>\n    </InlineFieldRow>\n  );\n};\n\nFilters.displayName = 'Filters';\n\nexport interface Filter {\n  key: string;\n  value: string;\n  op?: string;\n  conjunction?: string;\n}\n","import React, { useState } from 'react';\nimport { Input, InlineLabel, RadioButtonGroup, InlineField } from '@grafana/ui';\n\nimport { QueryEditorRow } from '../components/Forms';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { components } from '../components/selectors';\nimport { ProjectsOptions, ProjectQueryType } from 'types';\nimport { SelectableValue } from '@grafana/data';\nimport { Filter, Filters } from 'components/Filters';\n\ninterface Props extends ProjectsOptions {\n  onChange: (value: ProjectsOptions) => void;\n}\n\nconst queryTypes = [\n  { label: 'Organization', value: ProjectQueryType.ORG },\n  { label: 'User', value: ProjectQueryType.USER },\n];\n\nconst filters: Array<SelectableValue<string>> = [\n  { label: 'Type', value: 'type' },\n  { label: 'Created At', value: 'created_at' },\n  { label: 'Title', value: 'Title' },\n  { label: 'Assignees', value: 'Assignees' },\n  { label: 'Status', value: 'Status' },\n  { label: 'Labels', value: 'Labels' },\n  { label: 'Reviewers', value: 'Reviewers' },\n  { label: 'Milestone', value: 'Milestone' },\n  { label: 'Iteration', value: 'Iteration' },\n];\n\nconst ops: Array<SelectableValue<string>> = [\n  { label: 'Equal', value: '=' },\n  { label: 'Not Equal', value: '!=' },\n  { label: 'Greater Than', value: '>' },\n  { label: 'Less Than', value: '<' },\n  { label: 'Less Than or Equal', value: '<=' },\n  { label: 'Greater Than or Equal', value: '>=' },\n  { label: 'Contains', value: '~' },\n];\n\nconst fetchFilters = async (key?: string) => (key ? [] : filters);\n\nconst QueryEditorProjects = (props: Props) => {\n  const [org, setOrg] = useState<string>(props.organization || '');\n  const [user, setUser] = useState<string>(props.user || '');\n  const [number, setNumber] = useState<number | string | undefined>(props.number);\n  const [kind, setKind] = useState<ProjectQueryType>(props.kind || ProjectQueryType.ORG);\n  const [filters, setFilters] = useState<Filter[]>(props.filters || []);\n  const label = kind === ProjectQueryType.ORG ? 'Organization' : 'User';\n  const tooltip =\n    kind === ProjectQueryType.ORG\n      ? \"The organization for the GitHub project (example: 'grafana)\"\n      : 'The user who owns the Github project';\n\n  return (\n    <>\n      <QueryEditorRow>\n        <InlineLabel\n          tooltip=\"The owner of the GitHub project. Does not support classic projects.\"\n          width={LeftColumnWidth * 2}\n        >\n          Project Owner\n        </InlineLabel>\n        <InlineField>\n          <RadioButtonGroup<ProjectQueryType>\n            options={queryTypes}\n            value={kind}\n            onChange={(v) => {\n              setKind(v);\n              props.onChange({\n                ...props,\n                kind: v,\n              });\n            }}\n            size={'md'}\n          />\n        </InlineField>\n      </QueryEditorRow>\n\n      <QueryEditorRow>\n        <InlineLabel tooltip={tooltip} width={LeftColumnWidth * 2}>\n          {label}\n        </InlineLabel>\n        {kind === ProjectQueryType.ORG && (\n          <Input\n            aria-label={components.QueryEditor.Owner.input}\n            width={RightColumnWidth}\n            value={org}\n            onChange={(el) => setOrg(el.currentTarget.value)}\n            onBlur={(el) =>\n              props.onChange({\n                ...props,\n                organization: el.currentTarget.value,\n                kind,\n              })\n            }\n          />\n        )}\n        {kind === ProjectQueryType.USER && (\n          <Input\n            aria-label={components.QueryEditor.Owner.input}\n            width={RightColumnWidth}\n            value={user}\n            onChange={(el) => setUser(el.currentTarget.value)}\n            onBlur={(el) =>\n              props.onChange({\n                ...props,\n                user: el.currentTarget.value,\n                kind,\n              })\n            }\n          />\n        )}\n      </QueryEditorRow>\n\n      <QueryEditorRow>\n        <InlineLabel\n          tooltip=\"The project number for the GitHub project (example: 123). Does not support classic projects.\"\n          width={LeftColumnWidth * 2}\n        >\n          Project Number\n        </InlineLabel>\n        <Input\n          aria-label={components.QueryEditor.Number.input}\n          width={RightColumnWidth}\n          value={number}\n          onChange={(el) => setNumber(num(el.currentTarget.value))}\n          onBlur={(el) =>\n            props.onChange({\n              ...props,\n              number: num(el.currentTarget.value),\n            })\n          }\n        />\n      </QueryEditorRow>\n\n      {/* Filters currently only apply to Project Items */}\n      {number && (\n        <QueryEditorRow>\n          <InlineLabel width={LeftColumnWidth * 2}>Filters</InlineLabel>\n          <Filters\n            onChange={(filters: Filter[]) => {\n              setFilters(filters);\n              props.onChange({\n                ...props,\n                filters,\n              });\n            }}\n            loadOptions={fetchFilters}\n            value={filters}\n            ops={ops}\n          ></Filters>\n        </QueryEditorRow>\n      )}\n    </>\n  );\n};\n\nfunction num(v: string) {\n  if (v.includes('$')) {\n    return v;\n  }\n  const val = parseInt(v, 10);\n  return isNaN(val) ? undefined : val;\n}\n\nexport default QueryEditorProjects;\n","import React from 'react';\nimport { Select, InlineField } from '@grafana/ui';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { WorkflowsOptions, WorkflowsTimeField } from 'types';\nimport { SelectableValue } from '@grafana/data';\n\ninterface Props extends WorkflowsOptions {\n  onChange: (value: WorkflowsOptions) => void;\n}\n\nconst timeFieldOptions: Array<SelectableValue<WorkflowsTimeField>> = Object.keys(WorkflowsTimeField)\n  .filter((_, i) => WorkflowsTimeField[i] !== undefined)\n  .map((_, i) => {\n    return {\n      label: `${WorkflowsTimeField[i]}`,\n      value: i as WorkflowsTimeField,\n    };\n  });\n\nconst defaultTimeField = 0 as WorkflowsTimeField;\n\nconst QueryEditorWorkflows = (props: Props) => {\n  return (\n    <>\n      <InlineField\n        labelWidth={LeftColumnWidth * 2}\n        label=\"Time Field\"\n        tooltip=\"The time field to filter on the time range\"\n      >\n        <Select\n          width={RightColumnWidth}\n          options={timeFieldOptions}\n          value={props.timeField || defaultTimeField}\n          onChange={(opt) => {\n            props.onChange({\n              ...props,\n              timeField: opt.value,\n            });\n          }}\n        />\n      </InlineField>\n    </>\n  );\n};\n\nexport default QueryEditorWorkflows;\n","import React, { useState } from 'react';\nimport { Input, InlineField } from '@grafana/ui';\nimport { RightColumnWidth, LeftColumnWidth } from './QueryEditor';\nimport { WorkflowUsageOptions } from 'types';\n\ninterface Props extends WorkflowUsageOptions {\n  onChange: (value: WorkflowUsageOptions) => void;\n}\n\nconst QueryEditorWorkflowUsage = (props: Props) => {\n  const [workflow, setWorkflow] = useState<string | undefined>(props.workflow);\n\n  return (\n    <>\n      <InlineField\n        labelWidth={LeftColumnWidth * 2}\n        label=\"Workflow\"\n        tooltip=\"The workflow id number or file name (e.g my-workflow.yml)\"\n      >\n        <Input\n          value={workflow}\n          width={RightColumnWidth * 2 + LeftColumnWidth}\n          onChange={(el) => setWorkflow(el.currentTarget.value)}\n          onBlur={(el) =>\n            props.onChange({\n              ...props,\n              workflow: el.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n    </>\n  );\n};\n\nexport default QueryEditorWorkflowUsage;\n","import React, { ReactNode, useCallback } from 'react';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { Select, InlineField } from '@grafana/ui';\n\nimport { GithubDataSource } from '../DataSource';\nimport { GithubDataSourceOptions, GitHubQuery, QueryType, DefaultQueryType } from '../types';\nimport { isValid } from '../validation';\nimport { components } from './../components/selectors';\n\nimport QueryEditorRepository from './QueryEditorRepository';\nimport QueryEditorReleases from './QueryEditorReleases';\nimport QueryEditorCommits from './QueryEditorCommits';\nimport QueryEditorIssues from './QueryEditorIssues';\nimport QueryEditorMilestones from './QueryEditorMilestones';\nimport QueryEditorPullRequests from './QueryEditorPullRequests';\nimport QueryEditorTags from './QueryEditorTags';\nimport QueryEditorContributors from './QueryEditorContributors';\nimport QueryEditorLabels from './QueryEditorLabels';\nimport QueryEditorPackages from './QueryEditorPackages';\nimport QueryEditorVulnerabilities from './QueryEditorVulnerabilities';\nimport QueryEditorProjects from './QueryEditorProjects';\nimport QueryEditorWorkflows from './QueryEditorWorkflows';\nimport QueryEditorWorkflowUsage from './QueryEditorWorkflowUsage';\n\ninterface Props extends QueryEditorProps<GithubDataSource, GitHubQuery, GithubDataSourceOptions> {\n  queryTypes?: string[];\n}\nexport const LeftColumnWidth = 10;\nexport const RightColumnWidth = 36;\n\n/* eslint-disable react/display-name */\nconst queryEditors: {\n  [key: string]: { component: (props: Props, onChange: (val: any) => void) => ReactNode };\n} = {\n  [QueryType.Repositories]: {\n    component: (_: Props, onChange: (val: any) => void) => <></>,\n  },\n  [QueryType.Labels]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorLabels {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Contributors]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorContributors {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Tags]: {\n    component: (props: Props, _: (val: any) => void) => <QueryEditorTags {...(props.query.options || {})} />,\n  },\n  [QueryType.Releases]: {\n    component: (props: Props, _: (val: any) => void) => <QueryEditorReleases {...(props.query.options || {})} />,\n  },\n  [QueryType.Commits]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorCommits {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Milestones]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorMilestones {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Issues]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorIssues {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Packages]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorPackages {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Pull_Requests]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorPullRequests {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Vulnerabilities]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorVulnerabilities {...(props.query.options || {})} />\n    ),\n  },\n  [QueryType.Projects]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorProjects {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Stargazers]: {\n    component: (_: Props, onChange: (val: any) => void) => <></>,\n  },\n  [QueryType.Workflows]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorWorkflows {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n  [QueryType.Workflow_Usage]: {\n    component: (props: Props, onChange: (val: any) => void) => (\n      <QueryEditorWorkflowUsage {...(props.query.options || {})} onChange={onChange} />\n    ),\n  },\n};\n\n/* eslint-enable react/display-name */\n\nconst queryTypeOptions: Array<SelectableValue<string>> = Object.keys(QueryType).map((v) => {\n  return {\n    label: v.replace(/_/gi, ' '),\n    value: v,\n  };\n});\n\nconst QueryEditor = (props: Props) => {\n  const onChange = useCallback(\n    (value: GitHubQuery) => {\n      props.onChange(value);\n\n      if (isValid(value)) {\n        props.onRunQuery();\n      }\n    },\n    [props]\n  );\n\n  const onKeyChange = useCallback(\n    (key: string, value: any) => {\n      onChange({\n        ...props.query,\n        [key]: value,\n      });\n    },\n    [onChange, props.query]\n  );\n\n  const queryEditor = queryEditors[props.query.queryType || DefaultQueryType];\n  const queryTypes = props.queryTypes || Object.keys(queryEditors);\n\n  return (\n    <>\n      <InlineField label=\"Query Type\" tooltip=\"What resource are you querying for?\" labelWidth={LeftColumnWidth * 2}>\n        <div aria-label={components.QueryEditor.QueryType.container.ariaLabel}>\n          <Select\n            menuShouldPortal={true}\n            width={RightColumnWidth}\n            options={queryTypeOptions.filter((v) => queryTypes.includes(v.value!))}\n            value={props.query.queryType}\n            onChange={(val) => onKeyChange('queryType', val.value || DefaultQueryType)}\n          />\n        </div>\n      </InlineField>\n\n      {hasRepo(props.query.queryType) && (\n        <QueryEditorRepository\n          repository={props.query.repository}\n          owner={props.query.owner}\n          onChange={(repo) => {\n            onChange({\n              ...props.query,\n              ...repo,\n            });\n          }}\n        ></QueryEditorRepository>\n      )}\n\n      {queryEditor ? (\n        queryEditor.component(props, (value: any) => onKeyChange('options', !!value ? value : undefined))\n      ) : (\n        <span>Unsupported Query Type</span>\n      )}\n    </>\n  );\n};\n\nconst nonRepoTypes = [QueryType.Projects, QueryType.ProjectItems];\n\nfunction hasRepo(qt?: string) {\n  return !nonRepoTypes.includes(qt as QueryType);\n}\n\nexport default QueryEditor;\n","import React from 'react';\nimport { InlineFieldRow, Select, Spinner } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  onChange: (value: string) => void;\n  value?: string;\n  options: string[];\n  width: number;\n  loading: boolean;\n}\n\nconst spannerCss = css`\n  margin: 0px 3px;\n  padding: 0px 3px;\n`;\n\nconst FieldSelect = (props: Props) => {\n  const { onChange, options, value, width, loading } = props;\n  return (\n    <InlineFieldRow>\n      <Select\n        allowCustomValue\n        value={value}\n        onChange={(opt) => onChange(opt.value!)}\n        width={width}\n        disabled={loading}\n        placeholder={loading ? 'Loading...' : 'Select...'}\n        options={options.map((opt) => {\n          return {\n            label: opt,\n            value: opt,\n          };\n        })}\n      />\n      {loading && (\n        <div>\n          <Spinner className={spannerCss} />\n        </div>\n      )}\n    </InlineFieldRow>\n  );\n};\n\nexport default FieldSelect;\n","import React, { useMemo, useState } from 'react';\n\nimport { InlineField } from '@grafana/ui';\n\nimport QueryEditor from './QueryEditor';\nimport { GithubDataSource } from '../DataSource';\nimport { GitHubVariableQuery, DefaultQueryType } from '../types';\nimport FieldSelect from '../components/FieldSelect';\nimport { isValid } from '../validation';\n\ninterface Props {\n  query: GitHubVariableQuery;\n  onChange: (query: GitHubVariableQuery, definition: string) => void;\n  datasource: GithubDataSource;\n}\n\nconst VariableQueryEditor = (props: Props) => {\n  const definition = `${props.datasource.name} - ${props.query.queryType || DefaultQueryType}`;\n  const [choices, setChoices] = useState<string[]>();\n\n  useMemo(async () => {\n    if (isValid(props.query)) {\n      setChoices(await props.datasource.getChoices(props.query));\n    }\n  }, [props.query, props.datasource]);\n\n  return (\n    <>\n      <QueryEditor\n        query={props.query}\n        datasource={props.datasource}\n        onChange={(query) =>\n          props.onChange(\n            {\n              ...query,\n              field: props.query.field,\n            },\n            definition\n          )\n        }\n        onRunQuery={() => {}}\n      />\n      <InlineField labelWidth={20} label=\"Field Value\" tooltip=\"This field determines the value used for the variable\">\n        <FieldSelect\n          onChange={(value) =>\n            props.onChange(\n              {\n                ...props.query,\n                key: value,\n              },\n              definition\n            )\n          }\n          options={choices || []}\n          width={64}\n          value={props.query.key}\n          loading={!choices}\n        />\n      </InlineField>\n      <InlineField labelWidth={20} label=\"Field Display\" tooltip=\"This field determines the text used for the variable\">\n        <FieldSelect\n          onChange={(value) =>\n            props.onChange(\n              {\n                ...props.query,\n                field: value,\n              },\n              definition\n            )\n          }\n          options={choices || []}\n          width={64}\n          value={props.query.field}\n          loading={!choices}\n        />\n      </InlineField>\n    </>\n  );\n};\n\nexport default VariableQueryEditor;\n","import { DataSourcePlugin } from '@grafana/data';\nimport { GithubDataSource } from './DataSource';\nimport ConfigEditor from './views/ConfigEditor';\nimport QueryEditor from './views/QueryEditor';\nimport VariableQueryEditor from './views/VariableQueryEditor';\nimport { GitHubQuery, GithubDataSourceOptions, GithubSecureJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<\n  GithubDataSource,\n  GitHubQuery,\n  GithubDataSourceOptions,\n  GithubSecureJsonData\n>(GithubDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setVariableQueryEditor(VariableQueryEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__89__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","replaceVariable","t","scoped","format","replace","interpolateObject","input","newOptions","keys","forEach","option","Array","isArray","replaced","map","opt","QueryType","PackageType","PullRequestTimeField","IssueTimeField","WorkflowsTimeField","ProjectQueryType","DefaultQueryType","isValid","query","queryType","Repositories","isEmpty","owner","Commits","Contributors","Tags","Releases","Labels","Milestones","Vulnerabilities","Stargazers","repository","Projects","options","user","kind","USER","organization","defaultAnnotationEventFinder","userId","login","email","avatarUrl","time","timeEnd","title","text","tags","prepareAnnotation","json","isNewAnnotation","annotation","annotationRest","field","timeField","targetRest","target","mappings","source","AnnotationEventFieldSource","Field","GithubDataSource","DataSourceWithBackend","request","app","CoreApp","Dashboard","PanelViewer","targets","properties","packageType","reportInteraction","trackRequest","super","applyTemplateVariables","updatedQuery","replaceVariables","this","templateSrv","res","datasourceId","id","refId","name","range","interval","toPromise","data","length","frame","events","hasTime","hasText","byName","f","fields","toLowerCase","regex","finder","entries","lower","v","split","RegExp","push","find","type","FieldType","string","setter","i","anno","values","match","exec","getAnnotationsFromFrame","getChoices","to","from","err","Promise","reject","metricFindQuery","DataFrameView","item","ex","constructor","instanceSettings","getTemplateSrv","filterQuery","hide","annotations","__defProp","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","__propIsEnum","propertyIsEnumerable","__defNormalProp","configurable","writable","__spreadValues","b","DataSourceDescription","dataSourceName","docsLink","hasRequiredFields","className","theme","useTheme2","styles","container","css","p","margin","marginTop","spacing","typography","body","color","colors","secondary","link","textDecoration","cx","href","rel","GenericConfigSection","children","description","isCollapsible","isInitiallyOpen","isOpen","setIsOpen","useState","iconName","isSubSection","collapsibleButtonAriaLabel","header","display","justifyContent","alignItems","subtitle","fontWeight","fontWeightRegular","descriptionText","marginBottom","bodySmall","content","IconButton","onClick","size","ConfigSection","_a","_b","props","exclude","indexOf","__objRest","components","ariaLabel","timeFieldInput","Divider","useStyles2","getStyles","hr","horizontalDivider","borderTop","border","weak","width","externalLink","radioButton","QueryEditorRow","InlineFieldRow","rowSpacing","setRepository","setOwner","useEffect","InlineLabel","tooltip","LeftColumnWidth","Input","aria-label","RightColumnWidth","onChange","el","currentTarget","onBlur","ref","setRef","gitRef","InlineField","labelWidth","label","timeFieldOptions","filter","_","setQuery","interactive","Select","data-testid","defaultTimeField","DefaultPackageType","NPM","packageTypeOptions","names","setNames","Filters","filters","setFilters","loading","setLoading","onValueChange","index","selected","changeFilters","onOpChange","op","onConjunctionChange","conjunction","remove","loadValues","opts","loadOptions","list","opList","wrapper","SegmentAsync","placeholder","allowCustomValue","update","Segment","ops","span","div","Button","variant","icon","displayName","queryTypes","ORG","fetchFilters","num","includes","val","parseInt","isNaN","org","setOrg","setUser","number","setNumber","setKind","RadioButtonGroup","workflow","setWorkflow","queryEditors","component","QueryEditorLabels","QueryEditorContributors","QueryEditorTags","QueryEditorReleases","QueryEditorCommits","QueryEditorMilestones","Issues","QueryEditorIssues","Packages","QueryEditorPackages","Pull_Requests","QueryEditorPullRequests","QueryEditorVulnerabilities","QueryEditorProjects","Workflows","QueryEditorWorkflows","Workflow_Usage","QueryEditorWorkflowUsage","queryTypeOptions","nonRepoTypes","ProjectItems","useCallback","onRunQuery","onKeyChange","queryEditor","menuShouldPortal","qt","QueryEditorRepository","repo","spannerCss","disabled","Spinner","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","jsonData","secureJsonData","secureJsonFields","secureSettings","selectedLicense","setSelectedLicense","githubUrl","onSettingUpdate","set","event","Collapse","collapsible","onToggle","x","pre","SecretInput","accessToken","isConfigured","onReset","Label","onUpdateDatasourceJsonDataOption","setVariableQueryEditor","datasource","choices","setChoices","useMemo","QueryEditor","FieldSelect","setQueryEditor"],"sourceRoot":""}